String Reverse using corba , idl and java implementation : 

1. Create the all ReverseServer.java , ReverseClient.java , ReverseImpl.java & ReverseModule.idl  files.

2. Run the IDL-to-Java compiler idlj, on the IDL file to create stubs and skeletons. This step assumes that you have included the path to the java/bin directory in your path.

  idlj -fall  ReverseModule.idl
The idlj compiler generates a number of files.
3. Compile the .java files, including the stubs and skeletons (which are in the directory newly created directory). This step assumes the java/bin directory is included in your path.

   javac *.java  ReverseModule/*.java
4. Start orbd. To start orbd from a UNIX command shell, enter :

    orbd -ORBInitialPort 1050&
5. Start the server. To start the  server from a UNIX command shell, enter :
  java ReverseServer -ORBInitialPort 1050& -ORBInitialHost localhost&

6. Run the client application :
  java ReverseClient -ORBInitialPort 1050 -ORBInitialHost localhost




coderom@coderom-virtual-machine:~/Downloads/IDL CORBA$ idlj -fall Re
Readme.docx         ReverseImpl.java    ReverseServer.java
ReverseClient.java  ReverseModule.idl   
coderom@coderom-virtual-machine:~/Downloads/IDL CORBA$ idlj -fall Re
Readme.docx         ReverseImpl.java    ReverseServer.java
coderom@coderom-virtual-machine:~/Downloads/IDL CORBA$ javac *.java ReverseModule/*.java
Note: ReverseModule/ReversePOA.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
coderom@coderom-virtual-machine:~/Downloads/IDL CORBA$ orbd -ORBInitialPort 1050&
[1] 12428
coderom@coderom-virtual-machine:~/Downloads/IDL CORBA$ java ReverseServer -ORBInitialPort 1050& -ORBInitialHost localhost&
[2] 12446
[3] 12447
coderom@coderom-virtual-machine:~/Downloads/IDL CORBA$ Reverse Object Created
Step1
Step2
-ORBInitialHost: command not found
Step3
Step4
Reverse Server reading and waiting....


coderom@coderom-virtual-machine:~/Downloads/IDL CORBA$ java ReverseClient -ORBInitialPort 1050 -ORBInitialHost localhost
Enter String=
i don't know why am i executing these assignments               
Server Send stnemngissa eseht gnitucexe i ma yhw wonk t'nod i






```idl
module ReverseModule {
  interface Reverse {
    string reverse_string(in string str);
  };
};
```

The IDL file defines a module called `ReverseModule`, which contains an interface called `Reverse`. Inside the `Reverse` interface, there is a single method called `reverse_string`.

Let's break down the IDL definition line by line:

- `module ReverseModule`: This line declares a module named `ReverseModule`. Modules are used to organize related interfaces and types.

- `interface Reverse`: This line declares an interface named `Reverse` within the `ReverseModule` module. An interface represents a contract for a set of operations that can be performed on objects implementing the interface.

- `string reverse_string(in string str)`: This line defines a method called `reverse_string` within the `Reverse` interface. The method takes a single input parameter `str`, which is of type `string`. The `in` keyword indicates that `str` is an input parameter. The method returns a `string` result, which represents the reversed string.

In summary, the IDL file defines a module named `ReverseModule` containing an interface named `Reverse`, which provides a single method `reverse_string` that takes a string as input and returns the reversed string.